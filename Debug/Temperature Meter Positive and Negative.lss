
Temperature Meter Positive and Negative.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000b4c  00000bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001674  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004c0  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00002700  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c03  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035c  00000000  00000000  00003423  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000771  00000000  00000000  0000377f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00003ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e3  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067b  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
  8a:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "std_macros.h"

void ADC_init()
{
	//Assuming channel A0 (ADC0)
	SET_BIT(ADMUX,MUX4);
  92:	3c 9a       	sbi	0x07, 4	; 7
	SET_BIT(ADMUX,REFS0);
  94:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  96:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);
  98:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS1);
  9a:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
  9c:	32 9a       	sbi	0x06, 2	; 6
}
  9e:	08 95       	ret

000000a0 <ADC_read>:
unsigned short ADC_read()
{
	unsigned short val;
	SET_BIT(ADCSRA,ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	86 fd       	sbrc	r24, 6
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <ADC_read+0x2>
	/* while(READ_BIT(ADCSRA,ADIF)==0);
	   SET_BIT(ADCSRA,ADIF); */
	val= ADCL;
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	90 e0       	ldi	r25, 0x00	; 0
	val|=(ADCH<<8);
  ac:	45 b1       	in	r20, 0x05	; 5
  ae:	34 2f       	mov	r19, r20
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	82 2b       	or	r24, r18
  b4:	93 2b       	or	r25, r19
	return val;
  b6:	08 95       	ret

000000b8 <DIO_setPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_setPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  b8:	84 34       	cpi	r24, 0x44	; 68
  ba:	09 f4       	brne	.+2      	; 0xbe <DIO_setPINDir+0x6>
  bc:	71 c0       	rjmp	.+226    	; 0x1a0 <DIO_setPINDir+0xe8>
  be:	85 34       	cpi	r24, 0x45	; 69
  c0:	48 f4       	brcc	.+18     	; 0xd4 <DIO_setPINDir+0x1c>
  c2:	82 34       	cpi	r24, 0x42	; 66
  c4:	99 f1       	breq	.+102    	; 0x12c <DIO_setPINDir+0x74>
  c6:	83 34       	cpi	r24, 0x43	; 67
  c8:	08 f0       	brcs	.+2      	; 0xcc <DIO_setPINDir+0x14>
  ca:	4d c0       	rjmp	.+154    	; 0x166 <DIO_setPINDir+0xae>
  cc:	81 34       	cpi	r24, 0x41	; 65
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_setPINDir+0x1a>
  d0:	83 c0       	rjmp	.+262    	; 0x1d8 <DIO_setPINDir+0x120>
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <DIO_setPINDir+0x3a>
  d4:	82 36       	cpi	r24, 0x62	; 98
  d6:	51 f1       	breq	.+84     	; 0x12c <DIO_setPINDir+0x74>
  d8:	83 36       	cpi	r24, 0x63	; 99
  da:	20 f4       	brcc	.+8      	; 0xe4 <DIO_setPINDir+0x2c>
  dc:	81 36       	cpi	r24, 0x61	; 97
  de:	09 f0       	breq	.+2      	; 0xe2 <DIO_setPINDir+0x2a>
  e0:	7b c0       	rjmp	.+246    	; 0x1d8 <DIO_setPINDir+0x120>
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <DIO_setPINDir+0x3a>
  e4:	83 36       	cpi	r24, 0x63	; 99
  e6:	09 f4       	brne	.+2      	; 0xea <DIO_setPINDir+0x32>
  e8:	3e c0       	rjmp	.+124    	; 0x166 <DIO_setPINDir+0xae>
  ea:	84 36       	cpi	r24, 0x64	; 100
  ec:	09 f0       	breq	.+2      	; 0xf0 <DIO_setPINDir+0x38>
  ee:	74 c0       	rjmp	.+232    	; 0x1d8 <DIO_setPINDir+0x120>
  f0:	57 c0       	rjmp	.+174    	; 0x1a0 <DIO_setPINDir+0xe8>
	{
		case 'A':
		case 'a':
		if(direction==1)
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	69 f4       	brne	.+26     	; 0x110 <DIO_setPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	ac 01       	movw	r20, r24
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPINDir+0x4c>
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPINDir+0x48>
 108:	ba 01       	movw	r22, r20
 10a:	62 2b       	or	r22, r18
 10c:	6a bb       	out	0x1a, r22	; 26
 10e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
 110:	2a b3       	in	r18, 0x1a	; 26
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	ac 01       	movw	r20, r24
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_setPINDir+0x66>
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_setPINDir+0x62>
 122:	ba 01       	movw	r22, r20
 124:	60 95       	com	r22
 126:	62 23       	and	r22, r18
 128:	6a bb       	out	0x1a, r22	; 26
 12a:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(direction==1)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_setPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	ac 01       	movw	r20, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_setPINDir+0x86>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_setPINDir+0x82>
 142:	ba 01       	movw	r22, r20
 144:	62 2b       	or	r22, r18
 146:	67 bb       	out	0x17, r22	; 23
 148:	08 95       	ret
		}
		else
		{
				CLR_BIT(DDRB,pinnumber);
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ac 01       	movw	r20, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_setPINDir+0xa0>
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_setPINDir+0x9c>
 15c:	ba 01       	movw	r22, r20
 15e:	60 95       	com	r22
 160:	62 23       	and	r22, r18
 162:	67 bb       	out	0x17, r22	; 23
 164:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_setPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_setPINDir+0xc0>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_setPINDir+0xbc>
 17c:	ba 01       	movw	r22, r20
 17e:	62 2b       	or	r22, r18
 180:	64 bb       	out	0x14, r22	; 20
 182:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 184:	24 b3       	in	r18, 0x14	; 20
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_setPINDir+0xda>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_setPINDir+0xd6>
 196:	ba 01       	movw	r22, r20
 198:	60 95       	com	r22
 19a:	62 23       	and	r22, r18
 19c:	64 bb       	out	0x14, r22	; 20
 19e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_setPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
 1a4:	21 b3       	in	r18, 0x11	; 17
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPINDir+0xfa>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPINDir+0xf6>
 1b6:	ba 01       	movw	r22, r20
 1b8:	62 2b       	or	r22, r18
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 1be:	21 b3       	in	r18, 0x11	; 17
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	ac 01       	movw	r20, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPINDir+0x114>
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPINDir+0x110>
 1d0:	ba 01       	movw	r22, r20
 1d2:	60 95       	com	r22
 1d4:	62 23       	and	r22, r18
 1d6:	61 bb       	out	0x11, r22	; 17
 1d8:	08 95       	ret

000001da <DIO_writePIN>:
		break;
	}
}
void DIO_writePIN(unsigned char portname,unsigned char pinnumber,unsigned char val)
{
	switch(portname)
 1da:	84 34       	cpi	r24, 0x44	; 68
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_writePIN+0x6>
 1de:	71 c0       	rjmp	.+226    	; 0x2c2 <DIO_writePIN+0xe8>
 1e0:	85 34       	cpi	r24, 0x45	; 69
 1e2:	48 f4       	brcc	.+18     	; 0x1f6 <DIO_writePIN+0x1c>
 1e4:	82 34       	cpi	r24, 0x42	; 66
 1e6:	99 f1       	breq	.+102    	; 0x24e <DIO_writePIN+0x74>
 1e8:	83 34       	cpi	r24, 0x43	; 67
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <DIO_writePIN+0x14>
 1ec:	4d c0       	rjmp	.+154    	; 0x288 <DIO_writePIN+0xae>
 1ee:	81 34       	cpi	r24, 0x41	; 65
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_writePIN+0x1a>
 1f2:	83 c0       	rjmp	.+262    	; 0x2fa <DIO_writePIN+0x120>
 1f4:	0f c0       	rjmp	.+30     	; 0x214 <DIO_writePIN+0x3a>
 1f6:	82 36       	cpi	r24, 0x62	; 98
 1f8:	51 f1       	breq	.+84     	; 0x24e <DIO_writePIN+0x74>
 1fa:	83 36       	cpi	r24, 0x63	; 99
 1fc:	20 f4       	brcc	.+8      	; 0x206 <DIO_writePIN+0x2c>
 1fe:	81 36       	cpi	r24, 0x61	; 97
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_writePIN+0x2a>
 202:	7b c0       	rjmp	.+246    	; 0x2fa <DIO_writePIN+0x120>
 204:	07 c0       	rjmp	.+14     	; 0x214 <DIO_writePIN+0x3a>
 206:	83 36       	cpi	r24, 0x63	; 99
 208:	09 f4       	brne	.+2      	; 0x20c <DIO_writePIN+0x32>
 20a:	3e c0       	rjmp	.+124    	; 0x288 <DIO_writePIN+0xae>
 20c:	84 36       	cpi	r24, 0x64	; 100
 20e:	09 f0       	breq	.+2      	; 0x212 <DIO_writePIN+0x38>
 210:	74 c0       	rjmp	.+232    	; 0x2fa <DIO_writePIN+0x120>
 212:	57 c0       	rjmp	.+174    	; 0x2c2 <DIO_writePIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_writePIN+0x58>
		{
			SET_BIT(PORTA,pinnumber);
 218:	2b b3       	in	r18, 0x1b	; 27
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_writePIN+0x4c>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_writePIN+0x48>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	6b bb       	out	0x1b, r22	; 27
 230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 232:	2b b3       	in	r18, 0x1b	; 27
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_writePIN+0x66>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_writePIN+0x62>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	6b bb       	out	0x1b, r22	; 27
 24c:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_writePIN+0x92>
		{
			SET_BIT(PORTB,pinnumber);
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_writePIN+0x86>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_writePIN+0x82>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	68 bb       	out	0x18, r22	; 24
 26a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_writePIN+0xa0>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_writePIN+0x9c>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	68 bb       	out	0x18, r22	; 24
 286:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_writePIN+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_writePIN+0xc0>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_writePIN+0xbc>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	65 bb       	out	0x15, r22	; 21
 2a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 2a6:	25 b3       	in	r18, 0x15	; 21
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_writePIN+0xda>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_writePIN+0xd6>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	65 bb       	out	0x15, r22	; 21
 2c0:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <DIO_writePIN+0x106>
		{
			SET_BIT(PORTD,pinnumber);
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_writePIN+0xfa>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_writePIN+0xf6>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	62 bb       	out	0x12, r22	; 18
 2de:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_writePIN+0x114>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_writePIN+0x110>
 2f2:	ba 01       	movw	r22, r20
 2f4:	60 95       	com	r22
 2f6:	62 23       	and	r22, r18
 2f8:	62 bb       	out	0x12, r22	; 18
 2fa:	08 95       	ret

000002fc <DIO_togglePIN>:
		break;
	}
}
void DIO_togglePIN(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 2fc:	84 34       	cpi	r24, 0x44	; 68
 2fe:	09 f4       	brne	.+2      	; 0x302 <DIO_togglePIN+0x6>
 300:	3d c0       	rjmp	.+122    	; 0x37c <DIO_togglePIN+0x80>
 302:	85 34       	cpi	r24, 0x45	; 69
 304:	40 f4       	brcc	.+16     	; 0x316 <DIO_togglePIN+0x1a>
 306:	82 34       	cpi	r24, 0x42	; 66
 308:	f9 f0       	breq	.+62     	; 0x348 <DIO_togglePIN+0x4c>
 30a:	83 34       	cpi	r24, 0x43	; 67
 30c:	50 f5       	brcc	.+84     	; 0x362 <DIO_togglePIN+0x66>
 30e:	81 34       	cpi	r24, 0x41	; 65
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_togglePIN+0x18>
 312:	40 c0       	rjmp	.+128    	; 0x394 <DIO_togglePIN+0x98>
 314:	0c c0       	rjmp	.+24     	; 0x32e <DIO_togglePIN+0x32>
 316:	82 36       	cpi	r24, 0x62	; 98
 318:	b9 f0       	breq	.+46     	; 0x348 <DIO_togglePIN+0x4c>
 31a:	83 36       	cpi	r24, 0x63	; 99
 31c:	18 f4       	brcc	.+6      	; 0x324 <DIO_togglePIN+0x28>
 31e:	81 36       	cpi	r24, 0x61	; 97
 320:	c9 f5       	brne	.+114    	; 0x394 <DIO_togglePIN+0x98>
 322:	05 c0       	rjmp	.+10     	; 0x32e <DIO_togglePIN+0x32>
 324:	83 36       	cpi	r24, 0x63	; 99
 326:	e9 f0       	breq	.+58     	; 0x362 <DIO_togglePIN+0x66>
 328:	84 36       	cpi	r24, 0x64	; 100
 32a:	a1 f5       	brne	.+104    	; 0x394 <DIO_togglePIN+0x98>
 32c:	27 c0       	rjmp	.+78     	; 0x37c <DIO_togglePIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
 32e:	2b b3       	in	r18, 0x1b	; 27
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_togglePIN+0x40>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_togglePIN+0x3c>
 340:	ba 01       	movw	r22, r20
 342:	62 27       	eor	r22, r18
 344:	6b bb       	out	0x1b, r22	; 27
		break;
 346:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_togglePIN+0x5a>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_togglePIN+0x56>
 35a:	ba 01       	movw	r22, r20
 35c:	62 27       	eor	r22, r18
 35e:	68 bb       	out	0x18, r22	; 24
		break;
 360:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
 362:	25 b3       	in	r18, 0x15	; 21
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_togglePIN+0x74>
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_togglePIN+0x70>
 374:	ba 01       	movw	r22, r20
 376:	62 27       	eor	r22, r18
 378:	65 bb       	out	0x15, r22	; 21
		break;
 37a:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
 37c:	22 b3       	in	r18, 0x12	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	ac 01       	movw	r20, r24
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_togglePIN+0x8e>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_togglePIN+0x8a>
 38e:	ba 01       	movw	r22, r20
 390:	62 27       	eor	r22, r18
 392:	62 bb       	out	0x12, r22	; 18
 394:	08 95       	ret

00000396 <DIO_readPIN>:
	}
}
unsigned char DIO_readPIN(unsigned char portname,unsigned char pinnumber)
{
	unsigned char val;
	switch(portname)
 396:	84 34       	cpi	r24, 0x44	; 68
 398:	b1 f1       	breq	.+108    	; 0x406 <DIO_readPIN+0x70>
 39a:	85 34       	cpi	r24, 0x45	; 69
 39c:	38 f4       	brcc	.+14     	; 0x3ac <DIO_readPIN+0x16>
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	e1 f0       	breq	.+56     	; 0x3da <DIO_readPIN+0x44>
 3a2:	83 34       	cpi	r24, 0x43	; 67
 3a4:	28 f5       	brcc	.+74     	; 0x3f0 <DIO_readPIN+0x5a>
 3a6:	81 34       	cpi	r24, 0x41	; 65
 3a8:	c1 f5       	brne	.+112    	; 0x41a <DIO_readPIN+0x84>
 3aa:	0c c0       	rjmp	.+24     	; 0x3c4 <DIO_readPIN+0x2e>
 3ac:	82 36       	cpi	r24, 0x62	; 98
 3ae:	a9 f0       	breq	.+42     	; 0x3da <DIO_readPIN+0x44>
 3b0:	83 36       	cpi	r24, 0x63	; 99
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <DIO_readPIN+0x24>
 3b4:	81 36       	cpi	r24, 0x61	; 97
 3b6:	89 f5       	brne	.+98     	; 0x41a <DIO_readPIN+0x84>
 3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <DIO_readPIN+0x2e>
 3ba:	83 36       	cpi	r24, 0x63	; 99
 3bc:	c9 f0       	breq	.+50     	; 0x3f0 <DIO_readPIN+0x5a>
 3be:	84 36       	cpi	r24, 0x64	; 100
 3c0:	61 f5       	brne	.+88     	; 0x41a <DIO_readPIN+0x84>
 3c2:	21 c0       	rjmp	.+66     	; 0x406 <DIO_readPIN+0x70>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pinnumber);
 3c4:	29 b3       	in	r18, 0x19	; 25
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	c9 01       	movw	r24, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_readPIN+0x3a>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_readPIN+0x36>
 3d4:	98 2f       	mov	r25, r24
 3d6:	91 70       	andi	r25, 0x01	; 1
		break;
 3d8:	20 c0       	rjmp	.+64     	; 0x41a <DIO_readPIN+0x84>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pinnumber);
 3da:	26 b3       	in	r18, 0x16	; 22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_readPIN+0x50>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_readPIN+0x4c>
 3ea:	98 2f       	mov	r25, r24
 3ec:	91 70       	andi	r25, 0x01	; 1
		break;
 3ee:	15 c0       	rjmp	.+42     	; 0x41a <DIO_readPIN+0x84>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pinnumber);
 3f0:	23 b3       	in	r18, 0x13	; 19
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	c9 01       	movw	r24, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_readPIN+0x66>
 3f8:	95 95       	asr	r25
 3fa:	87 95       	ror	r24
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_readPIN+0x62>
 400:	98 2f       	mov	r25, r24
 402:	91 70       	andi	r25, 0x01	; 1
		break;
 404:	0a c0       	rjmp	.+20     	; 0x41a <DIO_readPIN+0x84>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pinnumber);
 406:	20 b3       	in	r18, 0x10	; 16
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	c9 01       	movw	r24, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_readPIN+0x7c>
 40e:	95 95       	asr	r25
 410:	87 95       	ror	r24
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_readPIN+0x78>
 416:	98 2f       	mov	r25, r24
 418:	91 70       	andi	r25, 0x01	; 1
		break;
	}
	return val;
}
 41a:	89 2f       	mov	r24, r25
 41c:	08 95       	ret

0000041e <DIO_setPORTDir>:
void DIO_setPORTDir(unsigned char portname,unsigned char direction)
{
	switch(portname)
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	d9 f0       	breq	.+54     	; 0x458 <DIO_setPORTDir+0x3a>
 422:	85 34       	cpi	r24, 0x45	; 69
 424:	38 f4       	brcc	.+14     	; 0x434 <DIO_setPORTDir+0x16>
 426:	82 34       	cpi	r24, 0x42	; 66
 428:	99 f0       	breq	.+38     	; 0x450 <DIO_setPORTDir+0x32>
 42a:	83 34       	cpi	r24, 0x43	; 67
 42c:	98 f4       	brcc	.+38     	; 0x454 <DIO_setPORTDir+0x36>
 42e:	81 34       	cpi	r24, 0x41	; 65
 430:	a1 f4       	brne	.+40     	; 0x45a <DIO_setPORTDir+0x3c>
 432:	0c c0       	rjmp	.+24     	; 0x44c <DIO_setPORTDir+0x2e>
 434:	82 36       	cpi	r24, 0x62	; 98
 436:	61 f0       	breq	.+24     	; 0x450 <DIO_setPORTDir+0x32>
 438:	83 36       	cpi	r24, 0x63	; 99
 43a:	18 f4       	brcc	.+6      	; 0x442 <DIO_setPORTDir+0x24>
 43c:	81 36       	cpi	r24, 0x61	; 97
 43e:	69 f4       	brne	.+26     	; 0x45a <DIO_setPORTDir+0x3c>
 440:	05 c0       	rjmp	.+10     	; 0x44c <DIO_setPORTDir+0x2e>
 442:	83 36       	cpi	r24, 0x63	; 99
 444:	39 f0       	breq	.+14     	; 0x454 <DIO_setPORTDir+0x36>
 446:	84 36       	cpi	r24, 0x64	; 100
 448:	41 f4       	brne	.+16     	; 0x45a <DIO_setPORTDir+0x3c>
 44a:	06 c0       	rjmp	.+12     	; 0x458 <DIO_setPORTDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 44c:	6a bb       	out	0x1a, r22	; 26
		break;
 44e:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 450:	67 bb       	out	0x17, r22	; 23
		break;
 452:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 454:	64 bb       	out	0x14, r22	; 20
		break;
 456:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 458:	61 bb       	out	0x11, r22	; 17
 45a:	08 95       	ret

0000045c <DIO_writePORT>:
		break;
	}
}
void DIO_writePORT(unsigned char portname,unsigned char val)
{
	switch(portname)
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	d9 f0       	breq	.+54     	; 0x496 <DIO_writePORT+0x3a>
 460:	85 34       	cpi	r24, 0x45	; 69
 462:	38 f4       	brcc	.+14     	; 0x472 <DIO_writePORT+0x16>
 464:	82 34       	cpi	r24, 0x42	; 66
 466:	99 f0       	breq	.+38     	; 0x48e <DIO_writePORT+0x32>
 468:	83 34       	cpi	r24, 0x43	; 67
 46a:	98 f4       	brcc	.+38     	; 0x492 <DIO_writePORT+0x36>
 46c:	81 34       	cpi	r24, 0x41	; 65
 46e:	a1 f4       	brne	.+40     	; 0x498 <DIO_writePORT+0x3c>
 470:	0c c0       	rjmp	.+24     	; 0x48a <DIO_writePORT+0x2e>
 472:	82 36       	cpi	r24, 0x62	; 98
 474:	61 f0       	breq	.+24     	; 0x48e <DIO_writePORT+0x32>
 476:	83 36       	cpi	r24, 0x63	; 99
 478:	18 f4       	brcc	.+6      	; 0x480 <DIO_writePORT+0x24>
 47a:	81 36       	cpi	r24, 0x61	; 97
 47c:	69 f4       	brne	.+26     	; 0x498 <DIO_writePORT+0x3c>
 47e:	05 c0       	rjmp	.+10     	; 0x48a <DIO_writePORT+0x2e>
 480:	83 36       	cpi	r24, 0x63	; 99
 482:	39 f0       	breq	.+14     	; 0x492 <DIO_writePORT+0x36>
 484:	84 36       	cpi	r24, 0x64	; 100
 486:	41 f4       	brne	.+16     	; 0x498 <DIO_writePORT+0x3c>
 488:	06 c0       	rjmp	.+12     	; 0x496 <DIO_writePORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 48a:	6b bb       	out	0x1b, r22	; 27
		break;
 48c:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 48e:	68 bb       	out	0x18, r22	; 24
		break;
 490:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 492:	65 bb       	out	0x15, r22	; 21
		break;
 494:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 496:	62 bb       	out	0x12, r22	; 18
 498:	08 95       	ret

0000049a <DIO_togglePORT>:
		break;
	}
}
void DIO_togglePORT(unsigned char portname)
{
	switch(portname)
 49a:	84 34       	cpi	r24, 0x44	; 68
 49c:	09 f1       	breq	.+66     	; 0x4e0 <DIO_togglePORT+0x46>
 49e:	85 34       	cpi	r24, 0x45	; 69
 4a0:	38 f4       	brcc	.+14     	; 0x4b0 <DIO_togglePORT+0x16>
 4a2:	82 34       	cpi	r24, 0x42	; 66
 4a4:	a9 f0       	breq	.+42     	; 0x4d0 <DIO_togglePORT+0x36>
 4a6:	83 34       	cpi	r24, 0x43	; 67
 4a8:	b8 f4       	brcc	.+46     	; 0x4d8 <DIO_togglePORT+0x3e>
 4aa:	81 34       	cpi	r24, 0x41	; 65
 4ac:	e1 f4       	brne	.+56     	; 0x4e6 <DIO_togglePORT+0x4c>
 4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <DIO_togglePORT+0x2e>
 4b0:	82 36       	cpi	r24, 0x62	; 98
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <DIO_togglePORT+0x36>
 4b4:	83 36       	cpi	r24, 0x63	; 99
 4b6:	18 f4       	brcc	.+6      	; 0x4be <DIO_togglePORT+0x24>
 4b8:	81 36       	cpi	r24, 0x61	; 97
 4ba:	a9 f4       	brne	.+42     	; 0x4e6 <DIO_togglePORT+0x4c>
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <DIO_togglePORT+0x2e>
 4be:	83 36       	cpi	r24, 0x63	; 99
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <DIO_togglePORT+0x3e>
 4c2:	84 36       	cpi	r24, 0x64	; 100
 4c4:	81 f4       	brne	.+32     	; 0x4e6 <DIO_togglePORT+0x4c>
 4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <DIO_togglePORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=(~PORTA);
 4c8:	8b b3       	in	r24, 0x1b	; 27
 4ca:	80 95       	com	r24
 4cc:	8b bb       	out	0x1b, r24	; 27
		break;
 4ce:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=(~PORTB);
 4d0:	88 b3       	in	r24, 0x18	; 24
 4d2:	80 95       	com	r24
 4d4:	88 bb       	out	0x18, r24	; 24
		break;
 4d6:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=(~PORTC);
 4d8:	85 b3       	in	r24, 0x15	; 21
 4da:	80 95       	com	r24
 4dc:	85 bb       	out	0x15, r24	; 21
		break;
 4de:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=(~PORTD);
 4e0:	82 b3       	in	r24, 0x12	; 18
 4e2:	80 95       	com	r24
 4e4:	82 bb       	out	0x12, r24	; 18
 4e6:	08 95       	ret

000004e8 <DIO_readPORT>:
	}
}
unsigned char DIO_readPORT(unsigned char portname)
{
	unsigned char val;
	switch(portname)
 4e8:	84 34       	cpi	r24, 0x44	; 68
 4ea:	d9 f0       	breq	.+54     	; 0x522 <DIO_readPORT+0x3a>
 4ec:	85 34       	cpi	r24, 0x45	; 69
 4ee:	38 f4       	brcc	.+14     	; 0x4fe <DIO_readPORT+0x16>
 4f0:	82 34       	cpi	r24, 0x42	; 66
 4f2:	99 f0       	breq	.+38     	; 0x51a <DIO_readPORT+0x32>
 4f4:	83 34       	cpi	r24, 0x43	; 67
 4f6:	98 f4       	brcc	.+38     	; 0x51e <DIO_readPORT+0x36>
 4f8:	81 34       	cpi	r24, 0x41	; 65
 4fa:	a1 f4       	brne	.+40     	; 0x524 <DIO_readPORT+0x3c>
 4fc:	0c c0       	rjmp	.+24     	; 0x516 <DIO_readPORT+0x2e>
 4fe:	82 36       	cpi	r24, 0x62	; 98
 500:	61 f0       	breq	.+24     	; 0x51a <DIO_readPORT+0x32>
 502:	83 36       	cpi	r24, 0x63	; 99
 504:	18 f4       	brcc	.+6      	; 0x50c <DIO_readPORT+0x24>
 506:	81 36       	cpi	r24, 0x61	; 97
 508:	69 f4       	brne	.+26     	; 0x524 <DIO_readPORT+0x3c>
 50a:	05 c0       	rjmp	.+10     	; 0x516 <DIO_readPORT+0x2e>
 50c:	83 36       	cpi	r24, 0x63	; 99
 50e:	39 f0       	breq	.+14     	; 0x51e <DIO_readPORT+0x36>
 510:	84 36       	cpi	r24, 0x64	; 100
 512:	41 f4       	brne	.+16     	; 0x524 <DIO_readPORT+0x3c>
 514:	06 c0       	rjmp	.+12     	; 0x522 <DIO_readPORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 516:	99 b3       	in	r25, 0x19	; 25
		break;
 518:	05 c0       	rjmp	.+10     	; 0x524 <DIO_readPORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
 51a:	96 b3       	in	r25, 0x16	; 22
		break;
 51c:	03 c0       	rjmp	.+6      	; 0x524 <DIO_readPORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
 51e:	93 b3       	in	r25, 0x13	; 19
		break;
 520:	01 c0       	rjmp	.+2      	; 0x524 <DIO_readPORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
 522:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 524:	89 2f       	mov	r24, r25
 526:	08 95       	ret

00000528 <DIO_pullupconnect>:
void DIO_pullupconnect(unsigned char portname,unsigned char pinnumber,unsigned char connect)
{
	DIO_writePIN(portname,pinnumber,connect);
 528:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
}
 52c:	08 95       	ret

0000052e <DIO_write_low_nibble>:
void DIO_write_low_nibble(unsigned char portname,unsigned char val)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	c8 2f       	mov	r28, r24
 534:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,0,READ_BIT(val,0));
 536:	46 2f       	mov	r20, r22
 538:	41 70       	andi	r20, 0x01	; 1
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,1,READ_BIT(val,1));
 540:	4d 2f       	mov	r20, r29
 542:	46 95       	lsr	r20
 544:	41 70       	andi	r20, 0x01	; 1
 546:	8c 2f       	mov	r24, r28
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,2,READ_BIT(val,2));
 54e:	4d 2f       	mov	r20, r29
 550:	46 95       	lsr	r20
 552:	46 95       	lsr	r20
 554:	41 70       	andi	r20, 0x01	; 1
 556:	8c 2f       	mov	r24, r28
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,3,READ_BIT(val,3));
 55e:	d6 95       	lsr	r29
 560:	d6 95       	lsr	r29
 562:	d6 95       	lsr	r29
 564:	4d 2f       	mov	r20, r29
 566:	41 70       	andi	r20, 0x01	; 1
 568:	8c 2f       	mov	r24, r28
 56a:	63 e0       	ldi	r22, 0x03	; 3
 56c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <DIO_write_high_nibble>:
void DIO_write_high_nibble(unsigned char portname,unsigned char val)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	c8 2f       	mov	r28, r24
 57c:	d6 2f       	mov	r29, r22
	DIO_writePIN(portname,4,READ_BIT(val,0));
 57e:	46 2f       	mov	r20, r22
 580:	41 70       	andi	r20, 0x01	; 1
 582:	64 e0       	ldi	r22, 0x04	; 4
 584:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,5,READ_BIT(val,1));
 588:	4d 2f       	mov	r20, r29
 58a:	46 95       	lsr	r20
 58c:	41 70       	andi	r20, 0x01	; 1
 58e:	8c 2f       	mov	r24, r28
 590:	65 e0       	ldi	r22, 0x05	; 5
 592:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,6,READ_BIT(val,2));
 596:	4d 2f       	mov	r20, r29
 598:	46 95       	lsr	r20
 59a:	46 95       	lsr	r20
 59c:	41 70       	andi	r20, 0x01	; 1
 59e:	8c 2f       	mov	r24, r28
 5a0:	66 e0       	ldi	r22, 0x06	; 6
 5a2:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_writePIN(portname,7,READ_BIT(val,3));
 5a6:	d6 95       	lsr	r29
 5a8:	d6 95       	lsr	r29
 5aa:	d6 95       	lsr	r29
 5ac:	4d 2f       	mov	r20, r29
 5ae:	41 70       	andi	r20, 0x01	; 1
 5b0:	8c 2f       	mov	r24, r28
 5b2:	67 e0       	ldi	r22, 0x07	; 7
 5b4:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <Enable>:
	LCD_clear_screen();
	LCD_send_cmd(ENTRY_MODE);
}
static void Enable()
{
	DIO_writePIN(LCD_CTRL_PORT,EN,1);
 5be:	82 e4       	ldi	r24, 0x42	; 66
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	8f e9       	ldi	r24, 0x9F	; 159
 5ca:	9f e0       	ldi	r25, 0x0F	; 15
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <Enable+0xe>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <Enable+0x14>
 5d2:	00 00       	nop
	_delay_ms(2);
	DIO_writePIN(LCD_CTRL_PORT,EN,0);
 5d4:	82 e4       	ldi	r24, 0x42	; 66
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
 5de:	8f e9       	ldi	r24, 0x9F	; 159
 5e0:	9f e0       	ldi	r25, 0x0F	; 15
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <Enable+0x24>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <Enable+0x2a>
 5e8:	00 00       	nop
	_delay_ms(2);
}
 5ea:	08 95       	ret

000005ec <LCD_send_cmd>:
void LCD_send_cmd(char cmd)
{
 5ec:	cf 93       	push	r28
 5ee:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
	DIO_writePORT(LCD_DATA_PORT,cmd);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,0);
 5f0:	82 e4       	ldi	r24, 0x42	; 66
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd>>4);
 5fa:	6c 2f       	mov	r22, r28
 5fc:	62 95       	swap	r22
 5fe:	6f 70       	andi	r22, 0x0F	; 15
 600:	81 e4       	ldi	r24, 0x41	; 65
 602:	0e 94 bb 02 	call	0x576	; 0x576 <DIO_write_high_nibble>
	Enable();
 606:	0e 94 df 02 	call	0x5be	; 0x5be <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,cmd);
 60a:	81 e4       	ldi	r24, 0x41	; 65
 60c:	6c 2f       	mov	r22, r28
 60e:	0e 94 bb 02 	call	0x576	; 0x576 <DIO_write_high_nibble>
	Enable();
 612:	0e 94 df 02 	call	0x5be	; 0x5be <Enable>
 616:	8f ec       	ldi	r24, 0xCF	; 207
 618:	97 e0       	ldi	r25, 0x07	; 7
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_send_cmd+0x2e>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_send_cmd+0x34>
 620:	00 00       	nop
	#endif
	_delay_ms(1);
}
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <LCD_send_char>:
void LCD_send_char(char data)
{
 626:	cf 93       	push	r28
 628:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
	DIO_writePORT(LCD_DATA_PORT,data);
	Enable();
	#elif defined FOUR_BIT_MODE
	DIO_writePIN(LCD_CTRL_PORT,RS,1);
 62a:	82 e4       	ldi	r24, 0x42	; 66
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	DIO_write_high_nibble(LCD_DATA_PORT,data>>4);
 634:	6c 2f       	mov	r22, r28
 636:	62 95       	swap	r22
 638:	6f 70       	andi	r22, 0x0F	; 15
 63a:	81 e4       	ldi	r24, 0x41	; 65
 63c:	0e 94 bb 02 	call	0x576	; 0x576 <DIO_write_high_nibble>
	Enable();
 640:	0e 94 df 02 	call	0x5be	; 0x5be <Enable>
	DIO_write_high_nibble(LCD_DATA_PORT,data);
 644:	81 e4       	ldi	r24, 0x41	; 65
 646:	6c 2f       	mov	r22, r28
 648:	0e 94 bb 02 	call	0x576	; 0x576 <DIO_write_high_nibble>
	Enable();
 64c:	0e 94 df 02 	call	0x5be	; 0x5be <Enable>
 650:	8f ec       	ldi	r24, 0xCF	; 207
 652:	97 e0       	ldi	r25, 0x07	; 7
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_send_char+0x2e>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_send_char+0x34>
 65a:	00 00       	nop
	#endif
	_delay_ms(1);
}
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <LCD_clear_screen>:
void LCD_clear_screen()
{
	LCD_send_cmd(CLR_SCREEN);
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
 666:	8f e4       	ldi	r24, 0x4F	; 79
 668:	96 e4       	ldi	r25, 0x46	; 70
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <LCD_clear_screen+0xa>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_clear_screen+0x10>
 670:	00 00       	nop
	_delay_ms(9);
}
 672:	08 95       	ret

00000674 <LCD_return_home>:
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
 67a:	8f e4       	ldi	r24, 0x4F	; 79
 67c:	96 e4       	ldi	r25, 0x46	; 70
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <LCD_return_home+0xa>
 682:	00 c0       	rjmp	.+0      	; 0x684 <LCD_return_home+0x10>
 684:	00 00       	nop
	_delay_ms(9);
}
 686:	08 95       	ret

00000688 <LCD_init>:
 688:	8f e7       	ldi	r24, 0x7F	; 127
 68a:	99 ea       	ldi	r25, 0xA9	; 169
 68c:	a3 e0       	ldi	r26, 0x03	; 3
 68e:	81 50       	subi	r24, 0x01	; 1
 690:	90 40       	sbci	r25, 0x00	; 0
 692:	a0 40       	sbci	r26, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <LCD_init+0x6>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_init+0x10>
 698:	00 00       	nop
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
	LCD_send_cmd(0x38);
	#elif defined FOUR_BIT_MODE
	DIO_setPINDir(LCD_DATA_PORT,4,1);
 69a:	81 e4       	ldi	r24, 0x41	; 65
 69c:	64 e0       	ldi	r22, 0x04	; 4
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,5,1);
 6a4:	81 e4       	ldi	r24, 0x41	; 65
 6a6:	65 e0       	ldi	r22, 0x05	; 5
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,6,1);
 6ae:	81 e4       	ldi	r24, 0x41	; 65
 6b0:	66 e0       	ldi	r22, 0x06	; 6
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_DATA_PORT,7,1);
 6b8:	81 e4       	ldi	r24, 0x41	; 65
 6ba:	67 e0       	ldi	r22, 0x07	; 7
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,EN,1);
 6c2:	82 e4       	ldi	r24, 0x42	; 66
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RS,1);
 6cc:	82 e4       	ldi	r24, 0x42	; 66
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_setPINDir(LCD_CTRL_PORT,RW,1);
 6d6:	82 e4       	ldi	r24, 0x42	; 66
 6d8:	62 e0       	ldi	r22, 0x02	; 2
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_setPINDir>
	DIO_writePIN(LCD_CTRL_PORT,RW,0);
 6e0:	82 e4       	ldi	r24, 0x42	; 66
 6e2:	62 e0       	ldi	r22, 0x02	; 2
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_writePIN>
	LCD_return_home();
 6ea:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_return_home>
	LCD_send_cmd(0x28);
 6ee:	88 e2       	ldi	r24, 0x28	; 40
 6f0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
	#endif
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
 6f4:	8c e0       	ldi	r24, 0x0C	; 12
 6f6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
	LCD_clear_screen();
 6fa:	0e 94 30 03 	call	0x660	; 0x660 <LCD_clear_screen>
	LCD_send_cmd(ENTRY_MODE);
 6fe:	86 e0       	ldi	r24, 0x06	; 6
 700:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
}
 704:	08 95       	ret

00000706 <LCD_send_string>:
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
	while( (*ptr) != 0)
 70c:	88 81       	ld	r24, Y
 70e:	88 23       	and	r24, r24
 710:	31 f0       	breq	.+12     	; 0x71e <LCD_send_string+0x18>
void LCD_return_home()
{
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
 712:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*ptr) != 0)
	{
		LCD_send_char(*ptr);
 714:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
	LCD_send_cmd(RET_HOME);
	_delay_ms(9);
}
void LCD_send_string(char *ptr)
{
	while( (*ptr) != 0)
 718:	89 91       	ld	r24, Y+
 71a:	88 23       	and	r24, r24
 71c:	d9 f7       	brne	.-10     	; 0x714 <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <LCD_move_cursor>:
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
 724:	28 2f       	mov	r18, r24
 726:	21 50       	subi	r18, 0x01	; 1
 728:	22 30       	cpi	r18, 0x02	; 2
 72a:	70 f4       	brcc	.+28     	; 0x748 <LCD_move_cursor+0x24>
 72c:	61 31       	cpi	r22, 0x11	; 17
 72e:	70 f4       	brcc	.+28     	; 0x74c <LCD_move_cursor+0x28>
 730:	66 23       	and	r22, r22
 732:	71 f0       	breq	.+28     	; 0x750 <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row == 1)
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	19 f4       	brne	.+6      	; 0x73e <LCD_move_cursor+0x1a>
	{
		data = 0x80 + column - 1;
 738:	96 2f       	mov	r25, r22
 73a:	91 58       	subi	r25, 0x81	; 129
 73c:	0a c0       	rjmp	.+20     	; 0x752 <LCD_move_cursor+0x2e>
	}
	else if(row == 2)
 73e:	82 30       	cpi	r24, 0x02	; 2
 740:	41 f4       	brne	.+16     	; 0x752 <LCD_move_cursor+0x2e>
	{
		data = 0xC0 + column - 1;
 742:	96 2f       	mov	r25, r22
 744:	91 54       	subi	r25, 0x41	; 65
 746:	05 c0       	rjmp	.+10     	; 0x752 <LCD_move_cursor+0x2e>
void LCD_move_cursor(char row,char column)
{
	char data;
	if(row>2 || row<1 || column>16 || column<1)
	{
		data=0x80;
 748:	90 e8       	ldi	r25, 0x80	; 128
 74a:	03 c0       	rjmp	.+6      	; 0x752 <LCD_move_cursor+0x2e>
 74c:	90 e8       	ldi	r25, 0x80	; 128
 74e:	01 c0       	rjmp	.+2      	; 0x752 <LCD_move_cursor+0x2e>
 750:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row == 2)
	{
		data = 0xC0 + column - 1;
	}
	LCD_send_cmd(data);
 752:	89 2f       	mov	r24, r25
 754:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_send_cmd>
 758:	08 95       	ret

0000075a <main>:

int main(void)
{
	unsigned short volt;
	unsigned char temp;
	ADC_init();
 75a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_init();
 75e:	0e 94 44 03 	call	0x688	; 0x688 <LCD_init>
	LCD_send_string("Temp=");
 762:	80 e6       	ldi	r24, 0x60	; 96
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 83 03 	call	0x706	; 0x706 <LCD_send_string>
    while(1)
    {
		volt = 2.5*ADC_read();
		if(volt>=1000)
		{
			temp = (volt-1000)/10;
 76a:	0a e0       	ldi	r16, 0x0A	; 10
 76c:	10 e0       	ldi	r17, 0x00	; 0
				LCD_send_char(' ');
			}
			else
			{
				LCD_move_cursor(1,6);
				LCD_send_char((temp/100)+48);
 76e:	0f 2e       	mov	r0, r31
 770:	f4 e6       	ldi	r31, 0x64	; 100
 772:	df 2e       	mov	r13, r31
 774:	f0 2d       	mov	r31, r0
				LCD_send_char((temp/10)%10+48);
 776:	da e0       	ldi	r29, 0x0A	; 10
				LCD_send_char('C');
			}
		}
		else
		{
			temp = (1000-volt)/10;
 778:	0f 2e       	mov	r0, r31
 77a:	f8 ee       	ldi	r31, 0xE8	; 232
 77c:	ef 2e       	mov	r14, r31
 77e:	f3 e0       	ldi	r31, 0x03	; 3
 780:	ff 2e       	mov	r15, r31
 782:	f0 2d       	mov	r31, r0
	ADC_init();
	LCD_init();
	LCD_send_string("Temp=");
    while(1)
    {
		volt = 2.5*ADC_read();
 784:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_read>
 788:	bc 01       	movw	r22, r24
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 93 04 	call	0x926	; 0x926 <__floatunsisf>
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	40 e2       	ldi	r20, 0x20	; 32
 798:	50 e4       	ldi	r21, 0x40	; 64
 79a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3>
 79e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 7a2:	dc 01       	movw	r26, r24
 7a4:	cb 01       	movw	r24, r22
		if(volt>=1000)
 7a6:	23 e0       	ldi	r18, 0x03	; 3
 7a8:	88 3e       	cpi	r24, 0xE8	; 232
 7aa:	92 07       	cpc	r25, r18
 7ac:	08 f4       	brcc	.+2      	; 0x7b0 <main+0x56>
 7ae:	5a c0       	rjmp	.+180    	; 0x864 <__stack+0x5>
		{
			temp = (volt-1000)/10;
 7b0:	88 5e       	subi	r24, 0xE8	; 232
 7b2:	93 40       	sbci	r25, 0x03	; 3
 7b4:	b8 01       	movw	r22, r16
 7b6:	0e 94 90 05 	call	0xb20	; 0xb20 <__udivmodhi4>
 7ba:	c6 2f       	mov	r28, r22
			if(temp<10)
 7bc:	6a 30       	cpi	r22, 0x0A	; 10
 7be:	a8 f4       	brcc	.+42     	; 0x7ea <main+0x90>
			{
				LCD_move_cursor(1,6);
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	66 e0       	ldi	r22, 0x06	; 6
 7c4:	0e 94 92 03 	call	0x724	; 0x724 <LCD_move_cursor>
				LCD_send_char(temp+48);
 7c8:	8c 2f       	mov	r24, r28
 7ca:	80 5d       	subi	r24, 0xD0	; 208
 7cc:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(0xDF);
 7d0:	8f ed       	ldi	r24, 0xDF	; 223
 7d2:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char('C');
 7d6:	83 e4       	ldi	r24, 0x43	; 67
 7d8:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(' ');
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(' ');
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
 7e8:	cd cf       	rjmp	.-102    	; 0x784 <main+0x2a>
			}
			else if(temp<100)
 7ea:	64 36       	cpi	r22, 0x64	; 100
 7ec:	d0 f4       	brcc	.+52     	; 0x822 <main+0xc8>
			{
				LCD_move_cursor(1,6);
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	66 e0       	ldi	r22, 0x06	; 6
 7f2:	0e 94 92 03 	call	0x724	; 0x724 <LCD_move_cursor>
				LCD_send_char((temp/10)+48);
 7f6:	8c 2f       	mov	r24, r28
 7f8:	6d 2f       	mov	r22, r29
 7fa:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodqi4>
 7fe:	c9 2f       	mov	r28, r25
 800:	80 5d       	subi	r24, 0xD0	; 208
 802:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char((temp%10)+48);
 806:	8c 2f       	mov	r24, r28
 808:	80 5d       	subi	r24, 0xD0	; 208
 80a:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(0xDF);
 80e:	8f ed       	ldi	r24, 0xDF	; 223
 810:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char('C');
 814:	83 e4       	ldi	r24, 0x43	; 67
 816:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(' ');
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
 820:	b1 cf       	rjmp	.-158    	; 0x784 <main+0x2a>
			}
			else
			{
				LCD_move_cursor(1,6);
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	66 e0       	ldi	r22, 0x06	; 6
 826:	0e 94 92 03 	call	0x724	; 0x724 <LCD_move_cursor>
				LCD_send_char((temp/100)+48);
 82a:	8c 2f       	mov	r24, r28
 82c:	6d 2d       	mov	r22, r13
 82e:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodqi4>
 832:	80 5d       	subi	r24, 0xD0	; 208
 834:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char((temp/10)%10+48);
 838:	8c 2f       	mov	r24, r28
 83a:	6d 2f       	mov	r22, r29
 83c:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodqi4>
 840:	c9 2f       	mov	r28, r25
 842:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodqi4>
 846:	89 2f       	mov	r24, r25
 848:	80 5d       	subi	r24, 0xD0	; 208
 84a:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char((temp%10)+48);
 84e:	8c 2f       	mov	r24, r28
 850:	80 5d       	subi	r24, 0xD0	; 208
 852:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(0xDF);
 856:	8f ed       	ldi	r24, 0xDF	; 223
 858:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char('C');
 85c:	83 e4       	ldi	r24, 0x43	; 67
 85e:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
 862:	90 cf       	rjmp	.-224    	; 0x784 <main+0x2a>
			}
		}
		else
		{
			temp = (1000-volt)/10;
 864:	97 01       	movw	r18, r14
 866:	28 1b       	sub	r18, r24
 868:	39 0b       	sbc	r19, r25
 86a:	c9 01       	movw	r24, r18
 86c:	b8 01       	movw	r22, r16
 86e:	0e 94 90 05 	call	0xb20	; 0xb20 <__udivmodhi4>
 872:	c6 2f       	mov	r28, r22
			LCD_move_cursor(1,6);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	66 e0       	ldi	r22, 0x06	; 6
 878:	0e 94 92 03 	call	0x724	; 0x724 <LCD_move_cursor>
			LCD_send_char('-');
 87c:	8d e2       	ldi	r24, 0x2D	; 45
 87e:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
			if(temp<10)
 882:	ca 30       	cpi	r28, 0x0A	; 10
 884:	70 f4       	brcc	.+28     	; 0x8a2 <__stack+0x43>
			{
				LCD_send_char(temp+48);
 886:	8c 2f       	mov	r24, r28
 888:	80 5d       	subi	r24, 0xD0	; 208
 88a:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(0xDF);
 88e:	8f ed       	ldi	r24, 0xDF	; 223
 890:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char('C');
 894:	83 e4       	ldi	r24, 0x43	; 67
 896:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(' ');
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
 8a0:	71 cf       	rjmp	.-286    	; 0x784 <main+0x2a>
			}
			else if(temp<100)
 8a2:	c4 36       	cpi	r28, 0x64	; 100
 8a4:	08 f0       	brcs	.+2      	; 0x8a8 <__stack+0x49>
 8a6:	6e cf       	rjmp	.-292    	; 0x784 <main+0x2a>
			{
				LCD_send_char((temp/10)+48);
 8a8:	8c 2f       	mov	r24, r28
 8aa:	6d 2f       	mov	r22, r29
 8ac:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodqi4>
 8b0:	c9 2f       	mov	r28, r25
 8b2:	80 5d       	subi	r24, 0xD0	; 208
 8b4:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char((temp%10)+48);
 8b8:	8c 2f       	mov	r24, r28
 8ba:	80 5d       	subi	r24, 0xD0	; 208
 8bc:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char(0xDF);
 8c0:	8f ed       	ldi	r24, 0xDF	; 223
 8c2:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
				LCD_send_char('C');
 8c6:	83 e4       	ldi	r24, 0x43	; 67
 8c8:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_char>
 8cc:	5b cf       	rjmp	.-330    	; 0x784 <main+0x2a>

000008ce <__fixunssfsi>:
 8ce:	70 d0       	rcall	.+224    	; 0x9b0 <__fp_splitA>
 8d0:	88 f0       	brcs	.+34     	; 0x8f4 <__fixunssfsi+0x26>
 8d2:	9f 57       	subi	r25, 0x7F	; 127
 8d4:	90 f0       	brcs	.+36     	; 0x8fa <__fixunssfsi+0x2c>
 8d6:	b9 2f       	mov	r27, r25
 8d8:	99 27       	eor	r25, r25
 8da:	b7 51       	subi	r27, 0x17	; 23
 8dc:	a0 f0       	brcs	.+40     	; 0x906 <__fixunssfsi+0x38>
 8de:	d1 f0       	breq	.+52     	; 0x914 <__fixunssfsi+0x46>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a f0       	brmi	.+6      	; 0x8f0 <__fixunssfsi+0x22>
 8ea:	ba 95       	dec	r27
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__fixunssfsi+0x12>
 8ee:	12 c0       	rjmp	.+36     	; 0x914 <__fixunssfsi+0x46>
 8f0:	b1 30       	cpi	r27, 0x01	; 1
 8f2:	81 f0       	breq	.+32     	; 0x914 <__fixunssfsi+0x46>
 8f4:	77 d0       	rcall	.+238    	; 0x9e4 <__fp_zero>
 8f6:	b1 e0       	ldi	r27, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	74 c0       	rjmp	.+232    	; 0x9e4 <__fp_zero>
 8fc:	67 2f       	mov	r22, r23
 8fe:	78 2f       	mov	r23, r24
 900:	88 27       	eor	r24, r24
 902:	b8 5f       	subi	r27, 0xF8	; 248
 904:	39 f0       	breq	.+14     	; 0x914 <__fixunssfsi+0x46>
 906:	b9 3f       	cpi	r27, 0xF9	; 249
 908:	cc f3       	brlt	.-14     	; 0x8fc <__fixunssfsi+0x2e>
 90a:	86 95       	lsr	r24
 90c:	77 95       	ror	r23
 90e:	67 95       	ror	r22
 910:	b3 95       	inc	r27
 912:	d9 f7       	brne	.-10     	; 0x90a <__fixunssfsi+0x3c>
 914:	3e f4       	brtc	.+14     	; 0x924 <__fixunssfsi+0x56>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__floatunsisf>:
 926:	e8 94       	clt
 928:	09 c0       	rjmp	.+18     	; 0x93c <__floatsisf+0x12>

0000092a <__floatsisf>:
 92a:	97 fb       	bst	r25, 7
 92c:	3e f4       	brtc	.+14     	; 0x93c <__floatsisf+0x12>
 92e:	90 95       	com	r25
 930:	80 95       	com	r24
 932:	70 95       	com	r23
 934:	61 95       	neg	r22
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	99 23       	and	r25, r25
 93e:	a9 f0       	breq	.+42     	; 0x96a <__floatsisf+0x40>
 940:	f9 2f       	mov	r31, r25
 942:	96 e9       	ldi	r25, 0x96	; 150
 944:	bb 27       	eor	r27, r27
 946:	93 95       	inc	r25
 948:	f6 95       	lsr	r31
 94a:	87 95       	ror	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	b7 95       	ror	r27
 952:	f1 11       	cpse	r31, r1
 954:	f8 cf       	rjmp	.-16     	; 0x946 <__floatsisf+0x1c>
 956:	fa f4       	brpl	.+62     	; 0x996 <__floatsisf+0x6c>
 958:	bb 0f       	add	r27, r27
 95a:	11 f4       	brne	.+4      	; 0x960 <__floatsisf+0x36>
 95c:	60 ff       	sbrs	r22, 0
 95e:	1b c0       	rjmp	.+54     	; 0x996 <__floatsisf+0x6c>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	16 c0       	rjmp	.+44     	; 0x996 <__floatsisf+0x6c>
 96a:	88 23       	and	r24, r24
 96c:	11 f0       	breq	.+4      	; 0x972 <__floatsisf+0x48>
 96e:	96 e9       	ldi	r25, 0x96	; 150
 970:	11 c0       	rjmp	.+34     	; 0x994 <__floatsisf+0x6a>
 972:	77 23       	and	r23, r23
 974:	21 f0       	breq	.+8      	; 0x97e <__floatsisf+0x54>
 976:	9e e8       	ldi	r25, 0x8E	; 142
 978:	87 2f       	mov	r24, r23
 97a:	76 2f       	mov	r23, r22
 97c:	05 c0       	rjmp	.+10     	; 0x988 <__floatsisf+0x5e>
 97e:	66 23       	and	r22, r22
 980:	71 f0       	breq	.+28     	; 0x99e <__floatsisf+0x74>
 982:	96 e8       	ldi	r25, 0x86	; 134
 984:	86 2f       	mov	r24, r22
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	2a f0       	brmi	.+10     	; 0x996 <__floatsisf+0x6c>
 98c:	9a 95       	dec	r25
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	da f7       	brpl	.-10     	; 0x98c <__floatsisf+0x62>
 996:	88 0f       	add	r24, r24
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__fp_split3>:
 9a0:	57 fd       	sbrc	r21, 7
 9a2:	90 58       	subi	r25, 0x80	; 128
 9a4:	44 0f       	add	r20, r20
 9a6:	55 1f       	adc	r21, r21
 9a8:	59 f0       	breq	.+22     	; 0x9c0 <__fp_splitA+0x10>
 9aa:	5f 3f       	cpi	r21, 0xFF	; 255
 9ac:	71 f0       	breq	.+28     	; 0x9ca <__fp_splitA+0x1a>
 9ae:	47 95       	ror	r20

000009b0 <__fp_splitA>:
 9b0:	88 0f       	add	r24, r24
 9b2:	97 fb       	bst	r25, 7
 9b4:	99 1f       	adc	r25, r25
 9b6:	61 f0       	breq	.+24     	; 0x9d0 <__fp_splitA+0x20>
 9b8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ba:	79 f0       	breq	.+30     	; 0x9da <__fp_splitA+0x2a>
 9bc:	87 95       	ror	r24
 9be:	08 95       	ret
 9c0:	12 16       	cp	r1, r18
 9c2:	13 06       	cpc	r1, r19
 9c4:	14 06       	cpc	r1, r20
 9c6:	55 1f       	adc	r21, r21
 9c8:	f2 cf       	rjmp	.-28     	; 0x9ae <__fp_split3+0xe>
 9ca:	46 95       	lsr	r20
 9cc:	f1 df       	rcall	.-30     	; 0x9b0 <__fp_splitA>
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <__fp_splitA+0x30>
 9d0:	16 16       	cp	r1, r22
 9d2:	17 06       	cpc	r1, r23
 9d4:	18 06       	cpc	r1, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	f1 cf       	rjmp	.-30     	; 0x9bc <__fp_splitA+0xc>
 9da:	86 95       	lsr	r24
 9dc:	71 05       	cpc	r23, r1
 9de:	61 05       	cpc	r22, r1
 9e0:	08 94       	sec
 9e2:	08 95       	ret

000009e4 <__fp_zero>:
 9e4:	e8 94       	clt

000009e6 <__fp_szero>:
 9e6:	bb 27       	eor	r27, r27
 9e8:	66 27       	eor	r22, r22
 9ea:	77 27       	eor	r23, r23
 9ec:	cb 01       	movw	r24, r22
 9ee:	97 f9       	bld	r25, 7
 9f0:	08 95       	ret

000009f2 <__mulsf3>:
 9f2:	0b d0       	rcall	.+22     	; 0xa0a <__mulsf3x>
 9f4:	78 c0       	rjmp	.+240    	; 0xae6 <__fp_round>
 9f6:	69 d0       	rcall	.+210    	; 0xaca <__fp_pscA>
 9f8:	28 f0       	brcs	.+10     	; 0xa04 <__mulsf3+0x12>
 9fa:	6e d0       	rcall	.+220    	; 0xad8 <__fp_pscB>
 9fc:	18 f0       	brcs	.+6      	; 0xa04 <__mulsf3+0x12>
 9fe:	95 23       	and	r25, r21
 a00:	09 f0       	breq	.+2      	; 0xa04 <__mulsf3+0x12>
 a02:	5a c0       	rjmp	.+180    	; 0xab8 <__fp_inf>
 a04:	5f c0       	rjmp	.+190    	; 0xac4 <__fp_nan>
 a06:	11 24       	eor	r1, r1
 a08:	ee cf       	rjmp	.-36     	; 0x9e6 <__fp_szero>

00000a0a <__mulsf3x>:
 a0a:	ca df       	rcall	.-108    	; 0x9a0 <__fp_split3>
 a0c:	a0 f3       	brcs	.-24     	; 0x9f6 <__mulsf3+0x4>

00000a0e <__mulsf3_pse>:
 a0e:	95 9f       	mul	r25, r21
 a10:	d1 f3       	breq	.-12     	; 0xa06 <__mulsf3+0x14>
 a12:	95 0f       	add	r25, r21
 a14:	50 e0       	ldi	r21, 0x00	; 0
 a16:	55 1f       	adc	r21, r21
 a18:	62 9f       	mul	r22, r18
 a1a:	f0 01       	movw	r30, r0
 a1c:	72 9f       	mul	r23, r18
 a1e:	bb 27       	eor	r27, r27
 a20:	f0 0d       	add	r31, r0
 a22:	b1 1d       	adc	r27, r1
 a24:	63 9f       	mul	r22, r19
 a26:	aa 27       	eor	r26, r26
 a28:	f0 0d       	add	r31, r0
 a2a:	b1 1d       	adc	r27, r1
 a2c:	aa 1f       	adc	r26, r26
 a2e:	64 9f       	mul	r22, r20
 a30:	66 27       	eor	r22, r22
 a32:	b0 0d       	add	r27, r0
 a34:	a1 1d       	adc	r26, r1
 a36:	66 1f       	adc	r22, r22
 a38:	82 9f       	mul	r24, r18
 a3a:	22 27       	eor	r18, r18
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	62 1f       	adc	r22, r18
 a42:	73 9f       	mul	r23, r19
 a44:	b0 0d       	add	r27, r0
 a46:	a1 1d       	adc	r26, r1
 a48:	62 1f       	adc	r22, r18
 a4a:	83 9f       	mul	r24, r19
 a4c:	a0 0d       	add	r26, r0
 a4e:	61 1d       	adc	r22, r1
 a50:	22 1f       	adc	r18, r18
 a52:	74 9f       	mul	r23, r20
 a54:	33 27       	eor	r19, r19
 a56:	a0 0d       	add	r26, r0
 a58:	61 1d       	adc	r22, r1
 a5a:	23 1f       	adc	r18, r19
 a5c:	84 9f       	mul	r24, r20
 a5e:	60 0d       	add	r22, r0
 a60:	21 1d       	adc	r18, r1
 a62:	82 2f       	mov	r24, r18
 a64:	76 2f       	mov	r23, r22
 a66:	6a 2f       	mov	r22, r26
 a68:	11 24       	eor	r1, r1
 a6a:	9f 57       	subi	r25, 0x7F	; 127
 a6c:	50 40       	sbci	r21, 0x00	; 0
 a6e:	8a f0       	brmi	.+34     	; 0xa92 <__mulsf3_pse+0x84>
 a70:	e1 f0       	breq	.+56     	; 0xaaa <__mulsf3_pse+0x9c>
 a72:	88 23       	and	r24, r24
 a74:	4a f0       	brmi	.+18     	; 0xa88 <__mulsf3_pse+0x7a>
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	bb 1f       	adc	r27, r27
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	50 40       	sbci	r21, 0x00	; 0
 a86:	a9 f7       	brne	.-22     	; 0xa72 <__mulsf3_pse+0x64>
 a88:	9e 3f       	cpi	r25, 0xFE	; 254
 a8a:	51 05       	cpc	r21, r1
 a8c:	70 f0       	brcs	.+28     	; 0xaaa <__mulsf3_pse+0x9c>
 a8e:	14 c0       	rjmp	.+40     	; 0xab8 <__fp_inf>
 a90:	aa cf       	rjmp	.-172    	; 0x9e6 <__fp_szero>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	ec f3       	brlt	.-6      	; 0xa90 <__mulsf3_pse+0x82>
 a96:	98 3e       	cpi	r25, 0xE8	; 232
 a98:	dc f3       	brlt	.-10     	; 0xa90 <__mulsf3_pse+0x82>
 a9a:	86 95       	lsr	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b7 95       	ror	r27
 aa2:	f7 95       	ror	r31
 aa4:	e7 95       	ror	r30
 aa6:	9f 5f       	subi	r25, 0xFF	; 255
 aa8:	c1 f7       	brne	.-16     	; 0xa9a <__mulsf3_pse+0x8c>
 aaa:	fe 2b       	or	r31, r30
 aac:	88 0f       	add	r24, r24
 aae:	91 1d       	adc	r25, r1
 ab0:	96 95       	lsr	r25
 ab2:	87 95       	ror	r24
 ab4:	97 f9       	bld	r25, 7
 ab6:	08 95       	ret

00000ab8 <__fp_inf>:
 ab8:	97 f9       	bld	r25, 7
 aba:	9f 67       	ori	r25, 0x7F	; 127
 abc:	80 e8       	ldi	r24, 0x80	; 128
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	08 95       	ret

00000ac4 <__fp_nan>:
 ac4:	9f ef       	ldi	r25, 0xFF	; 255
 ac6:	80 ec       	ldi	r24, 0xC0	; 192
 ac8:	08 95       	ret

00000aca <__fp_pscA>:
 aca:	00 24       	eor	r0, r0
 acc:	0a 94       	dec	r0
 ace:	16 16       	cp	r1, r22
 ad0:	17 06       	cpc	r1, r23
 ad2:	18 06       	cpc	r1, r24
 ad4:	09 06       	cpc	r0, r25
 ad6:	08 95       	ret

00000ad8 <__fp_pscB>:
 ad8:	00 24       	eor	r0, r0
 ada:	0a 94       	dec	r0
 adc:	12 16       	cp	r1, r18
 ade:	13 06       	cpc	r1, r19
 ae0:	14 06       	cpc	r1, r20
 ae2:	05 06       	cpc	r0, r21
 ae4:	08 95       	ret

00000ae6 <__fp_round>:
 ae6:	09 2e       	mov	r0, r25
 ae8:	03 94       	inc	r0
 aea:	00 0c       	add	r0, r0
 aec:	11 f4       	brne	.+4      	; 0xaf2 <__fp_round+0xc>
 aee:	88 23       	and	r24, r24
 af0:	52 f0       	brmi	.+20     	; 0xb06 <__fp_round+0x20>
 af2:	bb 0f       	add	r27, r27
 af4:	40 f4       	brcc	.+16     	; 0xb06 <__fp_round+0x20>
 af6:	bf 2b       	or	r27, r31
 af8:	11 f4       	brne	.+4      	; 0xafe <__fp_round+0x18>
 afa:	60 ff       	sbrs	r22, 0
 afc:	04 c0       	rjmp	.+8      	; 0xb06 <__fp_round+0x20>
 afe:	6f 5f       	subi	r22, 0xFF	; 255
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	08 95       	ret

00000b08 <__udivmodqi4>:
 b08:	99 1b       	sub	r25, r25
 b0a:	79 e0       	ldi	r23, 0x09	; 9
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__udivmodqi4_ep>

00000b0e <__udivmodqi4_loop>:
 b0e:	99 1f       	adc	r25, r25
 b10:	96 17       	cp	r25, r22
 b12:	08 f0       	brcs	.+2      	; 0xb16 <__udivmodqi4_ep>
 b14:	96 1b       	sub	r25, r22

00000b16 <__udivmodqi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	7a 95       	dec	r23
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__udivmodqi4_loop>
 b1c:	80 95       	com	r24
 b1e:	08 95       	ret

00000b20 <__udivmodhi4>:
 b20:	aa 1b       	sub	r26, r26
 b22:	bb 1b       	sub	r27, r27
 b24:	51 e1       	ldi	r21, 0x11	; 17
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <__udivmodhi4_ep>

00000b28 <__udivmodhi4_loop>:
 b28:	aa 1f       	adc	r26, r26
 b2a:	bb 1f       	adc	r27, r27
 b2c:	a6 17       	cp	r26, r22
 b2e:	b7 07       	cpc	r27, r23
 b30:	10 f0       	brcs	.+4      	; 0xb36 <__udivmodhi4_ep>
 b32:	a6 1b       	sub	r26, r22
 b34:	b7 0b       	sbc	r27, r23

00000b36 <__udivmodhi4_ep>:
 b36:	88 1f       	adc	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	5a 95       	dec	r21
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__udivmodhi4_loop>
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	bc 01       	movw	r22, r24
 b44:	cd 01       	movw	r24, r26
 b46:	08 95       	ret

00000b48 <_exit>:
 b48:	f8 94       	cli

00000b4a <__stop_program>:
 b4a:	ff cf       	rjmp	.-2      	; 0xb4a <__stop_program>
